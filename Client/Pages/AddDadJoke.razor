@page "/adddadjoke"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using demo_blazor_swa_auth.Shared;
@using System.Security.Claims;
@using System.Net.Http.Json;
@using System.Text;
@using System.Text.Json;
@attribute [Authorize]
@inject IAccessTokenProvider AuthorizationService
@inject NavigationManager NavigationManager
@inject HttpClient Http

<EditForm Model="@Model" OnValidSubmit="@Submit">
    <h1 class="text-label">Your Dad Joke Entry</h1>
    <h2 class="text-label">Please add your dad joke here:</h2>
    <br/>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputTextArea @bind-Value="Model!.Joke" style="width: 100%;" rows="4" spellcheck="true" maxlength="1000"/>
    <br/>
    <button type="submit">Submit</button>
</EditForm>

@code {
    public AccessToken AccessToken { get; set; }
    
    public DadJoke? Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Model = new DadJoke
        {
            Id=Guid.NewGuid().ToString(),
            DateSubmitted=DateTime.Now,
            Joke=string.Empty,
            NoOfVotes=0
        };

        var accessTokenResult = await AuthorizationService.RequestAccessToken();
        if (!accessTokenResult.TryGetToken(out var token))
        {
            throw new InvalidOperationException(
                "Failed to provision the access token.");
        }

        AccessToken = token;
        var claims = GetAccessTokenClaims();        
        string email = GetClaim(claims, "emails");
        string userId = GetClaim(claims, "sub");
        string submittedBy = GetClaim(claims, "name");
        Model!.Email = email;
        Model!.UserId = userId;
        Model!.SubmittedBy = submittedBy;
    }

    private string GetClaim(IDictionary<string, object> claims, string claimType)
    {
        var claim = claims.FirstOrDefault(c => c.Key == claimType);
        return claim.Value.ToString();
    }

    protected IDictionary<string, object> GetAccessTokenClaims()
    {
        if (AccessToken == null)
        {
            return new Dictionary<string, object>();
        }

        // header.payload.signature
        var payload = AccessToken.Value.Split(".")[1];
        var base64Payload = payload.Replace('-', '+').Replace('_', '/')
            .PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=');

        return JsonSerializer.Deserialize<IDictionary<string, object>>(Convert.FromBase64String(base64Payload));
    }

    private async Task Submit()
    {
        try
        {
            Model!.DateSubmitted = DateTime.Now;

            var response = await Http.PostAsJsonAsync("DadJoke", Model);
            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/dadjokes");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine(error);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}