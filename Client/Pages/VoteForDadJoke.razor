
@page "/votefordadjoke"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using demo_blazor_swa_auth.Shared;
@using System.Security.Claims;
@using System.Net.Http.Json;
@using System.Text;
@using System.Text.Json;
@attribute [Authorize]
@inject IAccessTokenProvider AuthorizationService
@inject NavigationManager NavigationManager
@inject HttpClient Http

<h3>Vote for your favorite Dad Joke!</h3>

@if (dadjokes == null)
{
    <p>Loading jokes...</p>
}
else if (dadjokes.Length == 0)
{
    <p>No jokes found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Joke</th>
                <th>Vote</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var joke in dadjokes)
            {
                <tr>
                    <td>@joke.Joke</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => VoteForJoke(joke.Id)">Vote</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private DadJoke[]? dadjokes;

    private Vote? _vote;

    public AccessToken AccessToken { get; set; }

    protected override async Task OnInitializedAsync()
    {
        dadjokes = await Http.GetFromJsonAsync<DadJoke[]>("DadJoke");

        var accessTokenResult = await AuthorizationService.RequestAccessToken();
        if (!accessTokenResult.TryGetToken(out var token))
        {
            throw new InvalidOperationException(
                "Failed to provision the access token.");
        }

        AccessToken = token;
        var claims = GetAccessTokenClaims();        
        string email = GetClaim(claims, "emails");
        string userId = GetClaim(claims, "sub");
        string submittedBy = GetClaim(claims, "name");
        _vote = new Vote();
        _vote!.Email = email;
        _vote!.UserId = userId;
        _vote!.SubmittedBy = submittedBy;            
    }

    private async Task VoteForJoke(string id)
    {
        Vote vote = new Vote{
            Id = id,
            DateSubmitted = DateTime.Now,
            Email = _vote.Email,
            UserId = _vote.UserId,
            SubmittedBy = _vote.SubmittedBy
        };

        var response = await Http.PostAsJsonAsync("Vote", vote);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/dadjokes");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine(error);
        }
    }

    private string GetClaim(IDictionary<string, object> claims, string claimType)
    {
        var claim = claims.FirstOrDefault(c => c.Key == claimType);
        return claim.Value.ToString();
    }

    protected IDictionary<string, object> GetAccessTokenClaims()
    {
        if (AccessToken == null)
        {
            return new Dictionary<string, object>();
        }

        // header.payload.signature
        var payload = AccessToken.Value.Split(".")[1];
        var base64Payload = payload.Replace('-', '+').Replace('_', '/')
            .PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=');

        return JsonSerializer.Deserialize<IDictionary<string, object>>(Convert.FromBase64String(base64Payload));
    }    
}
